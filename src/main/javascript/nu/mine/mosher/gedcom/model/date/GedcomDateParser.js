dojo.provide("nu.mine.mosher.gedcom.model.date.GedcomDateParser");

/* Generated by PEG.js (http://pegjs.majda.cz/). */
nu.mine.mosher.gedcom.model.date.GedcomDateParser = (function(){
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.grammarParser.SyntaxError| describing the error.
     */
    parse: function(input) {
      var pos = 0;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quoteString(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')        // backslash
          .replace(/"/g, '\\"')          // closing quote character
          .replace(/\r/g, '\\r')         // carriage return
          .replace(/\u2028/g, '\\u2028') // line separator
          .replace(/\u2029/g, '\\u2029') // paragraph separator
          .replace(/\n/g, '\\n')         // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function arrayContains(array, value) {
        /*
         * Stupid IE does not have Array.prototype.indexOf, otherwise this
         * function would be a one-liner.
         */
        var length = array.length;
        for (var i = 0; i < length; i++) {
          if (array[i] === value) {
            return true;
          }
        }
        return false;
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        if (!arrayContains(rightmostMatchFailuresExpected, failure)) {
          rightmostMatchFailuresExpected.push(failure);
        }
      }
      
      function parse_start(context) {
        var cacheKey = "start" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result6 = parse_date_int(context);
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var result5 = parse_date_phrase(context);
          if (result5 !== null) {
            var result0 = result5;
          } else {
            var result4 = parse_date_period(context);
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var result3 = parse_date_range(context);
              if (result3 !== null) {
                var result0 = result3;
              } else {
                var result2 = parse_date_approx(context);
                if (result2 !== null) {
                  var result0 = result2;
                } else {
                  var result1 = parse_date(context);
                  if (result1 !== null) {
                    var result0 = result1;
                  } else {
                    var result0 = null;;
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_int(context) {
        var cacheKey = "date_int" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "INT") {
          var result2 = "INT";
          pos += 3;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("INT"));
          }
        }
        if (result2 !== null) {
          var result3 = parse_S(context);
          if (result3 !== null) {
            var result4 = parse_date(context);
            if (result4 !== null) {
              var result5 = parse_S(context);
              if (result5 !== null) {
                var result6 = parse_date_phrase(context);
                if (result6 !== null) {
                  var result1 = [result2, result3, result4, result5, result6];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(ymd) { return ymd; })(result1[2])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_phrase(context) {
        var cacheKey = "date_phrase" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === "(") {
          var result2 = "(";
          pos += 1;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("("));
          }
        }
        if (result2 !== null) {
          var result3 = [];
          if (input.substr(pos).match(/^[^)]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^)]");
            }
          }
          while (result5 !== null) {
            result3.push(result5);
            if (input.substr(pos).match(/^[^)]/) !== null) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed("[^)]");
              }
            }
          }
          if (result3 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result4 = ")";
              pos += 1;
            } else {
              var result4 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(")"));
              }
            }
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(str) { return str.join(""); })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_period(context) {
        var cacheKey = "date_period" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 4) === "FROM") {
          var result13 = "FROM";
          pos += 4;
        } else {
          var result13 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("FROM"));
          }
        }
        if (result13 !== null) {
          var result14 = parse_S(context);
          if (result14 !== null) {
            var result15 = parse_date(context);
            if (result15 !== null) {
              var result16 = parse_S(context);
              if (result16 !== null) {
                if (input.substr(pos, 2) === "TO") {
                  var result17 = "TO";
                  pos += 2;
                } else {
                  var result17 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("TO"));
                  }
                }
                if (result17 !== null) {
                  var result18 = parse_S(context);
                  if (result18 !== null) {
                    var result19 = parse_date(context);
                    if (result19 !== null) {
                      var result12 = [result13, result14, result15, result16, result17, result18, result19];
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        var result11 = result12 !== null
          ? (function(f, t) { return { from:f, to:t }; })(result12[2], result12[6])
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 4) === "FROM") {
            var result8 = "FROM";
            pos += 4;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("FROM"));
            }
          }
          if (result8 !== null) {
            var result9 = parse_S(context);
            if (result9 !== null) {
              var result10 = parse_date(context);
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(f) { return { from:f       }; })(result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 2) === "TO") {
              var result3 = "TO";
              pos += 2;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("TO"));
              }
            }
            if (result3 !== null) {
              var result4 = parse_S(context);
              if (result4 !== null) {
                var result5 = parse_date(context);
                if (result5 !== null) {
                  var result2 = [result3, result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(t) { return {         to:t }; })(result2[2])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_range(context) {
        var cacheKey = "date_range" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 3) === "BET") {
          var result13 = "BET";
          pos += 3;
        } else {
          var result13 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("BET"));
          }
        }
        if (result13 !== null) {
          var result14 = parse_S(context);
          if (result14 !== null) {
            var result15 = parse_date(context);
            if (result15 !== null) {
              var result16 = parse_S(context);
              if (result16 !== null) {
                if (input.substr(pos, 3) === "AND") {
                  var result17 = "AND";
                  pos += 3;
                } else {
                  var result17 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("AND"));
                  }
                }
                if (result17 !== null) {
                  var result18 = parse_S(context);
                  if (result18 !== null) {
                    var result19 = parse_date(context);
                    if (result19 !== null) {
                      var result12 = [result13, result14, result15, result16, result17, result18, result19];
                    } else {
                      var result12 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result12 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result12 = null;
                  pos = savedPos2;
                }
              } else {
                var result12 = null;
                pos = savedPos2;
              }
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        var result11 = result12 !== null
          ? (function(a, b) { return { after:a, before:b }; })(result12[2], result12[6])
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 3) === "AFT") {
            var result8 = "AFT";
            pos += 3;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("AFT"));
            }
          }
          if (result8 !== null) {
            var result9 = parse_S(context);
            if (result9 !== null) {
              var result10 = parse_date(context);
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(a) { return { after:a           }; })(result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 3) === "BEF") {
              var result3 = "BEF";
              pos += 3;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("BEF"));
              }
            }
            if (result3 !== null) {
              var result4 = parse_S(context);
              if (result4 !== null) {
                var result5 = parse_date(context);
                if (result5 !== null) {
                  var result2 = [result3, result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(b) { return {          before:b }; })(result2[2])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_approx(context) {
        var cacheKey = "date_approx" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        if (input.substr(pos, 3) === "ABT") {
          var result13 = "ABT";
          pos += 3;
        } else {
          var result13 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("ABT"));
          }
        }
        if (result13 !== null) {
          var result14 = parse_S(context);
          if (result14 !== null) {
            var result15 = parse_date(context);
            if (result15 !== null) {
              var result12 = [result13, result14, result15];
            } else {
              var result12 = null;
              pos = savedPos2;
            }
          } else {
            var result12 = null;
            pos = savedPos2;
          }
        } else {
          var result12 = null;
          pos = savedPos2;
        }
        var result11 = result12 !== null
          ? (function(ymd) { ymd.approx=true; return ymd; })(result12[2])
          : null;
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 3) === "CAL") {
            var result8 = "CAL";
            pos += 3;
          } else {
            var result8 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("CAL"));
            }
          }
          if (result8 !== null) {
            var result9 = parse_S(context);
            if (result9 !== null) {
              var result10 = parse_date(context);
              if (result10 !== null) {
                var result7 = [result8, result9, result10];
              } else {
                var result7 = null;
                pos = savedPos1;
              }
            } else {
              var result7 = null;
              pos = savedPos1;
            }
          } else {
            var result7 = null;
            pos = savedPos1;
          }
          var result6 = result7 !== null
            ? (function(ymd) { ymd.approx=true; return ymd; })(result7[2])
            : null;
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var savedPos0 = pos;
            if (input.substr(pos, 3) === "EST") {
              var result3 = "EST";
              pos += 3;
            } else {
              var result3 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("EST"));
              }
            }
            if (result3 !== null) {
              var result4 = parse_S(context);
              if (result4 !== null) {
                var result5 = parse_date(context);
                if (result5 !== null) {
                  var result2 = [result3, result4, result5];
                } else {
                  var result2 = null;
                  pos = savedPos0;
                }
              } else {
                var result2 = null;
                pos = savedPos0;
              }
            } else {
              var result2 = null;
              pos = savedPos0;
            }
            var result1 = result2 !== null
              ? (function(ymd) { ymd.approx=true; return ymd; })(result2[2])
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date(context) {
        var cacheKey = "date" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        if (input.substr(pos, 3) === "@#D") {
          var result36 = "@#D";
          pos += 3;
        } else {
          var result36 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("@#D"));
          }
        }
        if (result36 !== null) {
          if (input.substr(pos, 9) === "GREGORIAN") {
            var result37 = "GREGORIAN";
            pos += 9;
          } else {
            var result37 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("GREGORIAN"));
            }
          }
          if (result37 !== null) {
            if (input.substr(pos, 1) === "@") {
              var result38 = "@";
              pos += 1;
            } else {
              var result38 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("@"));
              }
            }
            if (result38 !== null) {
              var result39 = parse_OS(context);
              if (result39 !== null) {
                var result40 = parse_date_gregor(context);
                if (result40 !== null) {
                  var result35 = [result36, result37, result38, result39, result40];
                } else {
                  var result35 = null;
                  pos = savedPos4;
                }
              } else {
                var result35 = null;
                pos = savedPos4;
              }
            } else {
              var result35 = null;
              pos = savedPos4;
            }
          } else {
            var result35 = null;
            pos = savedPos4;
          }
        } else {
          var result35 = null;
          pos = savedPos4;
        }
        var result34 = result35 !== null
          ? (function(cal, ymd) { return ymd; })(result35[1], result35[4])
          : null;
        if (result34 !== null) {
          var result0 = result34;
        } else {
          var savedPos3 = pos;
          if (input.substr(pos, 3) === "@#D") {
            var result29 = "@#D";
            pos += 3;
          } else {
            var result29 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("@#D"));
            }
          }
          if (result29 !== null) {
            if (input.substr(pos, 6) === "JULIAN") {
              var result30 = "JULIAN";
              pos += 6;
            } else {
              var result30 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("JULIAN"));
              }
            }
            if (result30 !== null) {
              if (input.substr(pos, 1) === "@") {
                var result31 = "@";
                pos += 1;
              } else {
                var result31 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("@"));
                }
              }
              if (result31 !== null) {
                var result32 = parse_OS(context);
                if (result32 !== null) {
                  var result33 = parse_date_julian(context);
                  if (result33 !== null) {
                    var result28 = [result29, result30, result31, result32, result33];
                  } else {
                    var result28 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result28 = null;
                  pos = savedPos3;
                }
              } else {
                var result28 = null;
                pos = savedPos3;
              }
            } else {
              var result28 = null;
              pos = savedPos3;
            }
          } else {
            var result28 = null;
            pos = savedPos3;
          }
          var result27 = result28 !== null
            ? (function(cal, ymd) { ymd.julian = true; return ymd; })(result28[1], result28[4])
            : null;
          if (result27 !== null) {
            var result0 = result27;
          } else {
            var savedPos2 = pos;
            if (input.substr(pos, 3) === "@#D") {
              var result22 = "@#D";
              pos += 3;
            } else {
              var result22 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("@#D"));
              }
            }
            if (result22 !== null) {
              if (input.substr(pos, 6) === "HEBREW") {
                var result23 = "HEBREW";
                pos += 6;
              } else {
                var result23 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("HEBREW"));
                }
              }
              if (result23 !== null) {
                if (input.substr(pos, 1) === "@") {
                  var result24 = "@";
                  pos += 1;
                } else {
                  var result24 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("@"));
                  }
                }
                if (result24 !== null) {
                  var result25 = parse_OS(context);
                  if (result25 !== null) {
                    var result26 = parse_date_hebrew(context);
                    if (result26 !== null) {
                      var result21 = [result22, result23, result24, result25, result26];
                    } else {
                      var result21 = null;
                      pos = savedPos2;
                    }
                  } else {
                    var result21 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result21 = null;
                  pos = savedPos2;
                }
              } else {
                var result21 = null;
                pos = savedPos2;
              }
            } else {
              var result21 = null;
              pos = savedPos2;
            }
            var result20 = result21 !== null
              ? (function(cal, ymd) { ymd.hebrew = true; return ymd; })(result21[1], result21[4])
              : null;
            if (result20 !== null) {
              var result0 = result20;
            } else {
              var savedPos1 = pos;
              if (input.substr(pos, 3) === "@#D") {
                var result15 = "@#D";
                pos += 3;
              } else {
                var result15 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("@#D"));
                }
              }
              if (result15 !== null) {
                if (input.substr(pos, 8) === "FRENCH R") {
                  var result16 = "FRENCH R";
                  pos += 8;
                } else {
                  var result16 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("FRENCH R"));
                  }
                }
                if (result16 !== null) {
                  if (input.substr(pos, 1) === "@") {
                    var result17 = "@";
                    pos += 1;
                  } else {
                    var result17 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("@"));
                    }
                  }
                  if (result17 !== null) {
                    var result18 = parse_OS(context);
                    if (result18 !== null) {
                      var result19 = parse_date_french(context);
                      if (result19 !== null) {
                        var result14 = [result15, result16, result17, result18, result19];
                      } else {
                        var result14 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result14 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos1;
                }
              } else {
                var result14 = null;
                pos = savedPos1;
              }
              var result13 = result14 !== null
                ? (function(cal, ymd) { ymd.french = true; return ymd; })(result14[1], result14[4])
                : null;
              if (result13 !== null) {
                var result0 = result13;
              } else {
                var savedPos0 = pos;
                if (input.substr(pos, 3) === "@#D") {
                  var result7 = "@#D";
                  pos += 3;
                } else {
                  var result7 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("@#D"));
                  }
                }
                if (result7 !== null) {
                  var result8 = parse_other_cal(context);
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "@") {
                      var result9 = "@";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("@"));
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse_OS(context);
                      if (result10 !== null) {
                        var result11 = [];
                        if (input.length > pos) {
                          var result12 = input.charAt(pos);
                          pos++;
                        } else {
                          var result12 = null;
                          if (context.reportMatchFailures) {
                            matchFailed('any character');
                          }
                        }
                        while (result12 !== null) {
                          result11.push(result12);
                          if (input.length > pos) {
                            var result12 = input.charAt(pos);
                            pos++;
                          } else {
                            var result12 = null;
                            if (context.reportMatchFailures) {
                              matchFailed('any character');
                            }
                          }
                        }
                        if (result11 !== null) {
                          var result6 = [result7, result8, result9, result10, result11];
                        } else {
                          var result6 = null;
                          pos = savedPos0;
                        }
                      } else {
                        var result6 = null;
                        pos = savedPos0;
                      }
                    } else {
                      var result6 = null;
                      pos = savedPos0;
                    }
                  } else {
                    var result6 = null;
                    pos = savedPos0;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos0;
                }
                var result5 = result6 !== null
                  ? (function(cal, str) { return cal+": "+str.join(""); })(result6[1], result6[4])
                  : null;
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  var result4 = parse_date_slash(context);
                  var result3 = result4 !== null
                    ? (function(ymd) { ymd.julian = true; return ymd; })(result4)
                    : null;
                  if (result3 !== null) {
                    var result0 = result3;
                  } else {
                    var result2 = parse_date_gregor(context);
                    var result1 = result2 !== null
                      ? (function(ymd) { return ymd; })(result2)
                      : null;
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_other_cal(context) {
        var cacheKey = "other_cal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedReportMatchFailuresVar0 = context.reportMatchFailures;
        context.reportMatchFailures = false;
        var result5 = parse_known_cal(context);
        context.reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result2 = '';
        } else {
          var result2 = null;
          pos = savedPos1;
        }
        if (result2 !== null) {
          if (input.substr(pos).match(/^[^@]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (context.reportMatchFailures) {
              matchFailed("[^@]");
            }
          }
          if (result4 !== null) {
            var result3 = [];
            while (result4 !== null) {
              result3.push(result4);
              if (input.substr(pos).match(/^[^@]/) !== null) {
                var result4 = input.charAt(pos);
                pos++;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed("[^@]");
                }
              }
            }
          } else {
            var result3 = null;
          }
          if (result3 !== null) {
            var result1 = [result2, result3];
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(cal) { return cal.join(""); })(result1[1])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_known_cal(context) {
        var cacheKey = "known_cal" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 9) === "GREGORIAN") {
          var result4 = "GREGORIAN";
          pos += 9;
        } else {
          var result4 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("GREGORIAN"));
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 6) === "JULIAN") {
            var result3 = "JULIAN";
            pos += 6;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("JULIAN"));
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 6) === "HEBREW") {
              var result2 = "HEBREW";
              pos += 6;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("HEBREW"));
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 8) === "FRENCH R") {
                var result1 = "FRENCH R";
                pos += 8;
              } else {
                var result1 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("FRENCH R"));
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_gregor(context) {
        var cacheKey = "date_gregor" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_date_gregor_raw(context);
        if (result4 !== null) {
          var result5 = parse_S(context);
          if (result5 !== null) {
            var result6 = parse_epoch(context);
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(ymd, e) { ymd.year *= e; return ymd; })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_date_gregor_raw(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_julian(context) {
        var cacheKey = "date_julian" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result4 = parse_date_julian_raw(context);
        if (result4 !== null) {
          var result5 = parse_S(context);
          if (result5 !== null) {
            var result6 = parse_epoch(context);
            if (result6 !== null) {
              var result3 = [result4, result5, result6];
            } else {
              var result3 = null;
              pos = savedPos0;
            }
          } else {
            var result3 = null;
            pos = savedPos0;
          }
        } else {
          var result3 = null;
          pos = savedPos0;
        }
        var result2 = result3 !== null
          ? (function(ymd, e) { ymd.year *= e; return ymd; })(result3[0], result3[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_date_julian_raw(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_hebrew(context) {
        var cacheKey = "date_hebrew" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_N(context);
        if (result10 !== null) {
          var result11 = parse_S(context);
          if (result11 !== null) {
            var result12 = parse_month_hebr(context);
            if (result12 !== null) {
              var result13 = parse_S(context);
              if (result13 !== null) {
                var result14 = parse_year(context);
                if (result14 !== null) {
                  var result9 = [result10, result11, result12, result13, result14];
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(d, m, y) { return { day:d, month:m, year:y }; })(result9[0], result9[2], result9[4])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result5 = parse_month_hebr(context);
          if (result5 !== null) {
            var result6 = parse_S(context);
            if (result6 !== null) {
              var result7 = parse_year(context);
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function(m, y) { return { day:0, month:m, year:y }; })(result4[0], result4[2])
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_year(context);
            var result1 = result2 !== null
              ? (function(y) { return { day:0, month:0, year:y }; })(result2)
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_french(context) {
        var cacheKey = "date_french" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_N(context);
        if (result10 !== null) {
          var result11 = parse_S(context);
          if (result11 !== null) {
            var result12 = parse_month_fren(context);
            if (result12 !== null) {
              var result13 = parse_S(context);
              if (result13 !== null) {
                var result14 = parse_year(context);
                if (result14 !== null) {
                  var result9 = [result10, result11, result12, result13, result14];
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(d, m, y) { return { day:d, month:m, year:y }; })(result9[0], result9[2], result9[4])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result5 = parse_month_fren(context);
          if (result5 !== null) {
            var result6 = parse_S(context);
            if (result6 !== null) {
              var result7 = parse_year(context);
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function(m, y) { return { day:0, month:m, year:y }; })(result4[0], result4[2])
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_year(context);
            var result1 = result2 !== null
              ? (function(y) { return { day:0, month:0, year:y }; })(result2)
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_slash(context) {
        var cacheKey = "date_slash" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_N(context);
        if (result10 !== null) {
          var result11 = parse_S(context);
          if (result11 !== null) {
            var result12 = parse_month_engl(context);
            if (result12 !== null) {
              var result13 = parse_S(context);
              if (result13 !== null) {
                var result14 = parse_year_slash(context);
                if (result14 !== null) {
                  var result9 = [result10, result11, result12, result13, result14];
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(d, m, y) { return { day:d, month:m, year:y }; })(result9[0], result9[2], result9[4])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result5 = parse_month_engl(context);
          if (result5 !== null) {
            var result6 = parse_S(context);
            if (result6 !== null) {
              var result7 = parse_year_slash(context);
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function(m, y) { return { day:0, month:m, year:y }; })(result4[0], result4[2])
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_year_slash(context);
            var result1 = result2 !== null
              ? (function(y) { return { day:0, month:0, year:y }; })(result2)
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_gregor_raw(context) {
        var cacheKey = "date_gregor_raw" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_N(context);
        if (result10 !== null) {
          var result11 = parse_S(context);
          if (result11 !== null) {
            var result12 = parse_month_engl(context);
            if (result12 !== null) {
              var result13 = parse_S(context);
              if (result13 !== null) {
                var result14 = parse_year(context);
                if (result14 !== null) {
                  var result9 = [result10, result11, result12, result13, result14];
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(d, m, y) { return { day:d, month:m, year:y }; })(result9[0], result9[2], result9[4])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result5 = parse_month_engl(context);
          if (result5 !== null) {
            var result6 = parse_S(context);
            if (result6 !== null) {
              var result7 = parse_year(context);
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function(m, y) { return { day:0, month:m, year:y }; })(result4[0], result4[2])
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_year(context);
            var result1 = result2 !== null
              ? (function(y) { return { day:0, month:0, year:y }; })(result2)
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_date_julian_raw(context) {
        var cacheKey = "date_julian_raw" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result10 = parse_N(context);
        if (result10 !== null) {
          var result11 = parse_S(context);
          if (result11 !== null) {
            var result12 = parse_month_engl(context);
            if (result12 !== null) {
              var result13 = parse_S(context);
              if (result13 !== null) {
                var result14 = parse_year_julian(context);
                if (result14 !== null) {
                  var result9 = [result10, result11, result12, result13, result14];
                } else {
                  var result9 = null;
                  pos = savedPos1;
                }
              } else {
                var result9 = null;
                pos = savedPos1;
              }
            } else {
              var result9 = null;
              pos = savedPos1;
            }
          } else {
            var result9 = null;
            pos = savedPos1;
          }
        } else {
          var result9 = null;
          pos = savedPos1;
        }
        var result8 = result9 !== null
          ? (function(d, m, y) { return { day:d, month:m, year:y }; })(result9[0], result9[2], result9[4])
          : null;
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var savedPos0 = pos;
          var result5 = parse_month_engl(context);
          if (result5 !== null) {
            var result6 = parse_S(context);
            if (result6 !== null) {
              var result7 = parse_year_julian(context);
              if (result7 !== null) {
                var result4 = [result5, result6, result7];
              } else {
                var result4 = null;
                pos = savedPos0;
              }
            } else {
              var result4 = null;
              pos = savedPos0;
            }
          } else {
            var result4 = null;
            pos = savedPos0;
          }
          var result3 = result4 !== null
            ? (function(m, y) { return { day:0, month:m, year:y }; })(result4[0], result4[2])
            : null;
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_year_julian(context);
            var result1 = result2 !== null
              ? (function(y) { return { day:0, month:0, year:y }; })(result2)
              : null;
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_year_julian(context) {
        var cacheKey = "year_julian" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_year_slash(context);
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_year(context);
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_year_slash(context) {
        var cacheKey = "year_slash" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result2 = parse_year(context);
        if (result2 !== null) {
          if (input.substr(pos, 1) === "/") {
            var result3 = "/";
            pos += 1;
          } else {
            var result3 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("/"));
            }
          }
          if (result3 !== null) {
            var result4 = parse_N(context);
            if (result4 !== null) {
              var result1 = [result2, result3, result4];
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
        } else {
          var result1 = null;
          pos = savedPos0;
        }
        var result0 = result1 !== null
          ? (function(y) { return y+1; })(result1[0])
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_year(context) {
        var cacheKey = "year" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result1 = parse_N(context);
        var result0 = result1 !== null
          ? (function(y) { return (y==0) ? null : y; })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_N(context) {
        var cacheKey = "N" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result2 = input.charAt(pos);
          pos++;
        } else {
          var result2 = null;
          if (context.reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result2 !== null) {
          var result1 = [];
          while (result2 !== null) {
            result1.push(result2);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result2 = input.charAt(pos);
              pos++;
            } else {
              var result2 = null;
              if (context.reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result1 = null;
        }
        var result0 = result1 !== null
          ? (function(digits) { return parseInt(digits.join(""),10); })(result1)
          : null;
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_S(context) {
        var cacheKey = "S" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === " ") {
          var result1 = " ";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(" "));
          }
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (input.substr(pos, 1) === " ") {
              var result1 = " ";
              pos += 1;
            } else {
              var result1 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString(" "));
              }
            }
          }
        } else {
          var result0 = null;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_OS(context) {
        var cacheKey = "OS" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        if (input.substr(pos, 1) === " ") {
          var result1 = " ";
          pos += 1;
        } else {
          var result1 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString(" "));
          }
        }
        while (result1 !== null) {
          result0.push(result1);
          if (input.substr(pos, 1) === " ") {
            var result1 = " ";
            pos += 1;
          } else {
            var result1 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString(" "));
            }
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_epoch(context) {
        var cacheKey = "epoch" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "BC") {
          var result12 = "BC";
          pos += 2;
        } else {
          var result12 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("BC"));
          }
        }
        if (result12 !== null) {
          var result8 = result12;
        } else {
          if (input.substr(pos, 4) === "B.C.") {
            var result11 = "B.C.";
            pos += 4;
          } else {
            var result11 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("B.C."));
            }
          }
          if (result11 !== null) {
            var result8 = result11;
          } else {
            if (input.substr(pos, 3) === "BCE") {
              var result10 = "BCE";
              pos += 3;
            } else {
              var result10 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("BCE"));
              }
            }
            if (result10 !== null) {
              var result8 = result10;
            } else {
              if (input.substr(pos, 6) === "B.C.E.") {
                var result9 = "B.C.E.";
                pos += 6;
              } else {
                var result9 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("B.C.E."));
                }
              }
              if (result9 !== null) {
                var result8 = result9;
              } else {
                var result8 = null;;
              };
            };
          };
        }
        var result7 = result8 !== null
          ? (function() { return -1; })()
          : null;
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 2) === "AD") {
            var result6 = "AD";
            pos += 2;
          } else {
            var result6 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("AD"));
            }
          }
          if (result6 !== null) {
            var result2 = result6;
          } else {
            if (input.substr(pos, 4) === "A.D.") {
              var result5 = "A.D.";
              pos += 4;
            } else {
              var result5 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("A.D."));
              }
            }
            if (result5 !== null) {
              var result2 = result5;
            } else {
              if (input.substr(pos, 2) === "CE") {
                var result4 = "CE";
                pos += 2;
              } else {
                var result4 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("CE"));
                }
              }
              if (result4 !== null) {
                var result2 = result4;
              } else {
                if (input.substr(pos, 4) === "C.E.") {
                  var result3 = "C.E.";
                  pos += 4;
                } else {
                  var result3 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("C.E."));
                  }
                }
                if (result3 !== null) {
                  var result2 = result3;
                } else {
                  var result2 = null;;
                };
              };
            };
          }
          var result1 = result2 !== null
            ? (function() { return  1; })()
            : null;
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_month_engl(context) {
        var cacheKey = "month_engl" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "JAN") {
          var result24 = "JAN";
          pos += 3;
        } else {
          var result24 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("JAN"));
          }
        }
        var result23 = result24 !== null
          ? (function() { return  1; })()
          : null;
        if (result23 !== null) {
          var result0 = result23;
        } else {
          if (input.substr(pos, 3) === "FEB") {
            var result22 = "FEB";
            pos += 3;
          } else {
            var result22 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("FEB"));
            }
          }
          var result21 = result22 !== null
            ? (function() { return  2; })()
            : null;
          if (result21 !== null) {
            var result0 = result21;
          } else {
            if (input.substr(pos, 3) === "MAR") {
              var result20 = "MAR";
              pos += 3;
            } else {
              var result20 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("MAR"));
              }
            }
            var result19 = result20 !== null
              ? (function() { return  3; })()
              : null;
            if (result19 !== null) {
              var result0 = result19;
            } else {
              if (input.substr(pos, 3) === "APR") {
                var result18 = "APR";
                pos += 3;
              } else {
                var result18 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("APR"));
                }
              }
              var result17 = result18 !== null
                ? (function() { return  4; })()
                : null;
              if (result17 !== null) {
                var result0 = result17;
              } else {
                if (input.substr(pos, 3) === "MAY") {
                  var result16 = "MAY";
                  pos += 3;
                } else {
                  var result16 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("MAY"));
                  }
                }
                var result15 = result16 !== null
                  ? (function() { return  5; })()
                  : null;
                if (result15 !== null) {
                  var result0 = result15;
                } else {
                  if (input.substr(pos, 3) === "JUN") {
                    var result14 = "JUN";
                    pos += 3;
                  } else {
                    var result14 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("JUN"));
                    }
                  }
                  var result13 = result14 !== null
                    ? (function() { return  6; })()
                    : null;
                  if (result13 !== null) {
                    var result0 = result13;
                  } else {
                    if (input.substr(pos, 3) === "JUL") {
                      var result12 = "JUL";
                      pos += 3;
                    } else {
                      var result12 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("JUL"));
                      }
                    }
                    var result11 = result12 !== null
                      ? (function() { return  7; })()
                      : null;
                    if (result11 !== null) {
                      var result0 = result11;
                    } else {
                      if (input.substr(pos, 3) === "AUG") {
                        var result10 = "AUG";
                        pos += 3;
                      } else {
                        var result10 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("AUG"));
                        }
                      }
                      var result9 = result10 !== null
                        ? (function() { return  8; })()
                        : null;
                      if (result9 !== null) {
                        var result0 = result9;
                      } else {
                        if (input.substr(pos, 3) === "SEP") {
                          var result8 = "SEP";
                          pos += 3;
                        } else {
                          var result8 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("SEP"));
                          }
                        }
                        var result7 = result8 !== null
                          ? (function() { return  9; })()
                          : null;
                        if (result7 !== null) {
                          var result0 = result7;
                        } else {
                          if (input.substr(pos, 3) === "OCT") {
                            var result6 = "OCT";
                            pos += 3;
                          } else {
                            var result6 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("OCT"));
                            }
                          }
                          var result5 = result6 !== null
                            ? (function() { return 10; })()
                            : null;
                          if (result5 !== null) {
                            var result0 = result5;
                          } else {
                            if (input.substr(pos, 3) === "NOV") {
                              var result4 = "NOV";
                              pos += 3;
                            } else {
                              var result4 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("NOV"));
                              }
                            }
                            var result3 = result4 !== null
                              ? (function() { return 11; })()
                              : null;
                            if (result3 !== null) {
                              var result0 = result3;
                            } else {
                              if (input.substr(pos, 3) === "DEC") {
                                var result2 = "DEC";
                                pos += 3;
                              } else {
                                var result2 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("DEC"));
                                }
                              }
                              var result1 = result2 !== null
                                ? (function() { return 12; })()
                                : null;
                              if (result1 !== null) {
                                var result0 = result1;
                              } else {
                                var result0 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_month_fren(context) {
        var cacheKey = "month_fren" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 4) === "VEND") {
          var result26 = "VEND";
          pos += 4;
        } else {
          var result26 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("VEND"));
          }
        }
        var result25 = result26 !== null
          ? (function() { return  1; })()
          : null;
        if (result25 !== null) {
          var result0 = result25;
        } else {
          if (input.substr(pos, 4) === "BRUM") {
            var result24 = "BRUM";
            pos += 4;
          } else {
            var result24 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("BRUM"));
            }
          }
          var result23 = result24 !== null
            ? (function() { return  2; })()
            : null;
          if (result23 !== null) {
            var result0 = result23;
          } else {
            if (input.substr(pos, 4) === "FRIM") {
              var result22 = "FRIM";
              pos += 4;
            } else {
              var result22 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("FRIM"));
              }
            }
            var result21 = result22 !== null
              ? (function() { return  3; })()
              : null;
            if (result21 !== null) {
              var result0 = result21;
            } else {
              if (input.substr(pos, 4) === "NIVO") {
                var result20 = "NIVO";
                pos += 4;
              } else {
                var result20 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("NIVO"));
                }
              }
              var result19 = result20 !== null
                ? (function() { return  4; })()
                : null;
              if (result19 !== null) {
                var result0 = result19;
              } else {
                if (input.substr(pos, 4) === "PLUV") {
                  var result18 = "PLUV";
                  pos += 4;
                } else {
                  var result18 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("PLUV"));
                  }
                }
                var result17 = result18 !== null
                  ? (function() { return  5; })()
                  : null;
                if (result17 !== null) {
                  var result0 = result17;
                } else {
                  if (input.substr(pos, 4) === "VENT") {
                    var result16 = "VENT";
                    pos += 4;
                  } else {
                    var result16 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("VENT"));
                    }
                  }
                  var result15 = result16 !== null
                    ? (function() { return  6; })()
                    : null;
                  if (result15 !== null) {
                    var result0 = result15;
                  } else {
                    if (input.substr(pos, 4) === "GERM") {
                      var result14 = "GERM";
                      pos += 4;
                    } else {
                      var result14 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("GERM"));
                      }
                    }
                    var result13 = result14 !== null
                      ? (function() { return  7; })()
                      : null;
                    if (result13 !== null) {
                      var result0 = result13;
                    } else {
                      if (input.substr(pos, 4) === "FLOR") {
                        var result12 = "FLOR";
                        pos += 4;
                      } else {
                        var result12 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("FLOR"));
                        }
                      }
                      var result11 = result12 !== null
                        ? (function() { return  8; })()
                        : null;
                      if (result11 !== null) {
                        var result0 = result11;
                      } else {
                        if (input.substr(pos, 4) === "PRAI") {
                          var result10 = "PRAI";
                          pos += 4;
                        } else {
                          var result10 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("PRAI"));
                          }
                        }
                        var result9 = result10 !== null
                          ? (function() { return  9; })()
                          : null;
                        if (result9 !== null) {
                          var result0 = result9;
                        } else {
                          if (input.substr(pos, 4) === "MESS") {
                            var result8 = "MESS";
                            pos += 4;
                          } else {
                            var result8 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("MESS"));
                            }
                          }
                          var result7 = result8 !== null
                            ? (function() { return 10; })()
                            : null;
                          if (result7 !== null) {
                            var result0 = result7;
                          } else {
                            if (input.substr(pos, 4) === "THER") {
                              var result6 = "THER";
                              pos += 4;
                            } else {
                              var result6 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("THER"));
                              }
                            }
                            var result5 = result6 !== null
                              ? (function() { return 11; })()
                              : null;
                            if (result5 !== null) {
                              var result0 = result5;
                            } else {
                              if (input.substr(pos, 4) === "FRUC") {
                                var result4 = "FRUC";
                                pos += 4;
                              } else {
                                var result4 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("FRUC"));
                                }
                              }
                              var result3 = result4 !== null
                                ? (function() { return 12; })()
                                : null;
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos, 4) === "COMP") {
                                  var result2 = "COMP";
                                  pos += 4;
                                } else {
                                  var result2 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("COMP"));
                                  }
                                }
                                var result1 = result2 !== null
                                  ? (function() { return 13; })()
                                  : null;
                                if (result1 !== null) {
                                  var result0 = result1;
                                } else {
                                  var result0 = null;;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_month_hebr(context) {
        var cacheKey = "month_hebr" + '@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 3) === "NSN") {
          var result26 = "NSN";
          pos += 3;
        } else {
          var result26 = null;
          if (context.reportMatchFailures) {
            matchFailed(quoteString("NSN"));
          }
        }
        var result25 = result26 !== null
          ? (function() { return  1; })()
          : null;
        if (result25 !== null) {
          var result0 = result25;
        } else {
          if (input.substr(pos, 3) === "IYR") {
            var result24 = "IYR";
            pos += 3;
          } else {
            var result24 = null;
            if (context.reportMatchFailures) {
              matchFailed(quoteString("IYR"));
            }
          }
          var result23 = result24 !== null
            ? (function() { return  2; })()
            : null;
          if (result23 !== null) {
            var result0 = result23;
          } else {
            if (input.substr(pos, 3) === "SVN") {
              var result22 = "SVN";
              pos += 3;
            } else {
              var result22 = null;
              if (context.reportMatchFailures) {
                matchFailed(quoteString("SVN"));
              }
            }
            var result21 = result22 !== null
              ? (function() { return  3; })()
              : null;
            if (result21 !== null) {
              var result0 = result21;
            } else {
              if (input.substr(pos, 3) === "TMZ") {
                var result20 = "TMZ";
                pos += 3;
              } else {
                var result20 = null;
                if (context.reportMatchFailures) {
                  matchFailed(quoteString("TMZ"));
                }
              }
              var result19 = result20 !== null
                ? (function() { return  4; })()
                : null;
              if (result19 !== null) {
                var result0 = result19;
              } else {
                if (input.substr(pos, 3) === "AAV") {
                  var result18 = "AAV";
                  pos += 3;
                } else {
                  var result18 = null;
                  if (context.reportMatchFailures) {
                    matchFailed(quoteString("AAV"));
                  }
                }
                var result17 = result18 !== null
                  ? (function() { return  5; })()
                  : null;
                if (result17 !== null) {
                  var result0 = result17;
                } else {
                  if (input.substr(pos, 3) === "ELL") {
                    var result16 = "ELL";
                    pos += 3;
                  } else {
                    var result16 = null;
                    if (context.reportMatchFailures) {
                      matchFailed(quoteString("ELL"));
                    }
                  }
                  var result15 = result16 !== null
                    ? (function() { return  6; })()
                    : null;
                  if (result15 !== null) {
                    var result0 = result15;
                  } else {
                    if (input.substr(pos, 3) === "TSH") {
                      var result14 = "TSH";
                      pos += 3;
                    } else {
                      var result14 = null;
                      if (context.reportMatchFailures) {
                        matchFailed(quoteString("TSH"));
                      }
                    }
                    var result13 = result14 !== null
                      ? (function() { return  7; })()
                      : null;
                    if (result13 !== null) {
                      var result0 = result13;
                    } else {
                      if (input.substr(pos, 3) === "CSH") {
                        var result12 = "CSH";
                        pos += 3;
                      } else {
                        var result12 = null;
                        if (context.reportMatchFailures) {
                          matchFailed(quoteString("CSH"));
                        }
                      }
                      var result11 = result12 !== null
                        ? (function() { return  8; })()
                        : null;
                      if (result11 !== null) {
                        var result0 = result11;
                      } else {
                        if (input.substr(pos, 3) === "KSL") {
                          var result10 = "KSL";
                          pos += 3;
                        } else {
                          var result10 = null;
                          if (context.reportMatchFailures) {
                            matchFailed(quoteString("KSL"));
                          }
                        }
                        var result9 = result10 !== null
                          ? (function() { return  9; })()
                          : null;
                        if (result9 !== null) {
                          var result0 = result9;
                        } else {
                          if (input.substr(pos, 3) === "TVT") {
                            var result8 = "TVT";
                            pos += 3;
                          } else {
                            var result8 = null;
                            if (context.reportMatchFailures) {
                              matchFailed(quoteString("TVT"));
                            }
                          }
                          var result7 = result8 !== null
                            ? (function() { return 10; })()
                            : null;
                          if (result7 !== null) {
                            var result0 = result7;
                          } else {
                            if (input.substr(pos, 3) === "SHV") {
                              var result6 = "SHV";
                              pos += 3;
                            } else {
                              var result6 = null;
                              if (context.reportMatchFailures) {
                                matchFailed(quoteString("SHV"));
                              }
                            }
                            var result5 = result6 !== null
                              ? (function() { return 11; })()
                              : null;
                            if (result5 !== null) {
                              var result0 = result5;
                            } else {
                              if (input.substr(pos, 3) === "ADR") {
                                var result4 = "ADR";
                                pos += 3;
                              } else {
                                var result4 = null;
                                if (context.reportMatchFailures) {
                                  matchFailed(quoteString("ADR"));
                                }
                              }
                              var result3 = result4 !== null
                                ? (function() { return 12; })()
                                : null;
                              if (result3 !== null) {
                                var result0 = result3;
                              } else {
                                if (input.substr(pos, 3) === "ADS") {
                                  var result2 = "ADS";
                                  pos += 3;
                                } else {
                                  var result2 = null;
                                  if (context.reportMatchFailures) {
                                    matchFailed(quoteString("ADS"));
                                  }
                                }
                                var result1 = result2 !== null
                                  ? (function() { return 13; })()
                                  : null;
                                if (result1 !== null) {
                                  var result0 = result1;
                                } else {
                                  var result0 = null;;
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          switch (failuresExpected.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpected[0];
            default:
              failuresExpected.sort();
              return failuresExpected.slice(0, failuresExpected.length - 1).join(', ')
                + ' or '
                + failuresExpected[failuresExpected.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quoteString(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parse_start({ reportMatchFailures: true });
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
